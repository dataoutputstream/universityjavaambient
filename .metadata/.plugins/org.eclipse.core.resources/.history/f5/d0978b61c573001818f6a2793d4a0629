package muratori;

import java.util.concurrent.Semaphore;
import java.util.concurrent.TimeUnit;

public class CasaS extends Casa{
	
	Semaphore inizioC;
	Semaphore inizioM;
	Semaphore mutex;

	public CasaS(int n) {
		super(n);
		mutex=new Semaphore(1);
		inizioC=new Semaphore(1,true);
		inizioM=new Semaphore(0,true);
		
	}

	@Override
	public boolean inizia(int t) throws InterruptedException {
		if(pareti_rimanenti>0) {
		if(t==0)inizioC.acquire();else {inizioM.acquire();}
		mutex.acquire();
		nMesse++;
		mutex.release();
		if(nMesse==nMesseF && turno==1) {n--;if(n==0) {pareti_rimanenti--;n=nMesseF;}}
		if(nMesse==nMesseF && turno==0) {n=nMesseF;}
		TimeUnit.SECONDS.wait(1);
		Thread.sleep(5000);
		return true;
		}return false;
	}

	@Override
	public void termina() throws InterruptedException {
		if(pareti_rimanenti==0)System.out.println("Il Thread: "+Thread.currentThread().getId()+" ha finito");
		Muratore x=(Muratore)Thread.currentThread();
		if(nMesse==0 && turno==0) {nMesse=nMesseF;inizioM.release();}
		else if(nMesse==0 && turno==1){n--;nMesse=nMesseF;inizioC.release();}
		
		if(t==0 && turno==0 && nMesse>0)inizioC.release();else if(t==1 && turno==1){inizioM.release();}
		
	}

}
